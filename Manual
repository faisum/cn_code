1. Implementation of Stop and Wait Protocol and Sliding Window Protocol.
 Aim:
 To write a java program to perform sliding window.
 Algorithm:
 1.Start the program. 
2.Get the frame size from the user 
3.To create the frame based on the user request. 
4.To send frames to server from the client side.
 5.If your frames reach the server it will send ACK signal to client otherwise it will send
 NACK signal to client. 
6.Stop the program
 Program:
 import java.net.*;
 import java.io.*;
 import java.rmi.*;
 public class server
 {
 server.java
 public static void main(String a[])throws Exception
 {
 ServerSocket ser=new ServerSocket(10);
 Socket s=ser.accept();
 DataInputStream in=new DataInputStream(System.in);
 DataInputStream in1=new DataInputStream(s.getInputStream());
 String sbuff[]=new String[8];
 PrintStream p;
 int sptr=0,sws=8,nf,ano,i;
 String ch;
 do
 {
 p=new PrintStream(s.getOutputStream());
 System.out.print("Enter the no. of frames : ");
 nf=Integer.parseInt(in.readLine());
 p.println(nf);
 if(nf<=sws-1)
 {
 System.out.println("Enter "+nf+" Messages to be send\n");
 for(i=1;i<=nf;i++)
 {
 sbuff[sptr]=in.readLine();
 p.println(sbuff[sptr]);
 sptr=++sptr%8;
 }
 sws-=nf;
 System.out.print("Acknowledgment received");
 ano=Integer.parseInt(in1.readLine());
 System.out.println(" for "+ano+" frames");
 sws+=nf;
 }
 else
 1
{
 System.out.println("The no. of frames exceeds window size");
 break;
 }
 System.out.print("\nDo you wants to send some more frames : ");
 ch=in.readLine(); p.println(ch);
 }
 while(ch.equals("yes"));
 s.close();
 }
 }
 import java.net.*;
 import java.io.*;
 class client
 {
 client.java
 public static void main(String a[])throws Exception
 {
 Socket s=new Socket(InetAddress.getLocalHost(),10);
 DataInputStream in=new DataInputStream(s.getInputStream());
 PrintStream p=new PrintStream(s.getOutputStream());
 int i=0,rptr=-1,nf,rws=8;
 String rbuf[]=new String[8];
 String ch; System.out.println();
 do
 {
 nf=Integer.parseInt(in.readLine());
 if(nf<=rws-1)
 {
 for(i=1;i<=nf;i++)
 {
 rptr=++rptr%8;
 rbuf[rptr]=in.readLine();
 System.out.println("The received Frame " +rptr+" is : "+rbuf[rptr]);
 }
 rws-=nf;
 System.out.println("\nAcknowledgment sent\n");
 p.println(rptr+1); rws+=nf; }
 else
 break;
 ch=in.readLine();
 }
 while(ch.equals("yes"));
 }
 }


2. Implement socket programming date and time display from client to server using TCP Sockets 
Aim
 To implement socket programming date and time display from client to server using TCP
 Sockets 
Algorithm:
 SERVER
 1. Create a server socket and bind it to port. 
‟
 2. Listen for new connection and when a connection arrives, accept it. 
3. Send server s date and time to the client. 
‟
 4. Read client s IP address sent by the client.
 5. Display the client details. 
6. Repeat steps 2-5 until the server is terminated. 
7. Close all streams. 
8. Close the server socket. 
9. Stop. 
CLIENT
 1. Create a client socket and connect it to the server s port number. 
‟
 2. Retrieve its own IP address using built-in function. 
3. Send its address to the server. 
4. Display the date & time sent by the server.
 5. Close the input and output streams. 
6. Close the client socket. 
7. Stop
 Program:
 import java.net.*;
 import java.io.*;
 import java.util.*;
 class tcpserver
 {
 tcpserver.java
 public static void main(String arg[])
 {
 ServerSocket ss = null;
 Socket cs; PrintStream ps;
 BufferedReader dis;
 String inet; try
 {
 ss = new ServerSocket(4444);
 System.out.println("Press Ctrl+C to quit"); 
while(true)
 {
 cs = ss.accept();
 ps = new PrintStream(cs.getOutputStream());
 Date d = new Date();
 ps.println(d);
 dis = new BufferedReader(new InputStreamReader(cs.getInputStream()));
 inet = dis.readLine(); 
System.out.println("Client System/IP address is :"+ inet);
 ps.close(); 
dis.close();
 }
 }
 4
catch(IOException e)
 { System.out.println("The exception is :" + e);
 }
 }
 }
 import java.net.*;
 import java.io.*;
 class tcpclient
 {
 tcpclient.java
 public static void main (String args[])
 { 
Socket soc; 
BufferedReader dis;
 String sdate; 
PrintStream ps;
 try 
{ 
InetAddress ia = InetAddress.getLocalHost();
 if (args.length == 0)
 soc = new Socket(InetAddress.getLocalHost(),4444);
 else soc = new Socket(InetAddress.getByName(args[0]),4444);
 dis = new BufferedReader(new InputStreamReader(soc.getInputStream()));
 sdate=dis.readLine(); 
System.out.println("The date/time on server is : " +sdate);
 ps = new PrintStream(soc.getOutputStream());
 ps.println(ia);
 ps.close();}
 catch(IOException e)
 {
 System.out.println("THE EXCEPTION is :" + e);
 }
 }
 }


3. Write a code simulating ARP protocols
Aim
 To implement socket programming date and time display from client to server using TCP
 Sockets 
Algorithm:
 SERVER
 1. Create a server socket and bind it to port. 
‟
 2. Listen for new connection and when a connection arrives, accept it. 
3. Send server s date and time to the client. 
‟
 4. Read client s IP address sent by the client.
 5. Display the client details. 
6. Repeat steps 2-5 until the server is terminated. 
7. Close all streams. 
8. Close the server socket. 
9. Stop. 
CLIENT
 1. Create a client socket and connect it to the server s port number. 
‟
 2. Retrieve its own IP address using built-in function. 
3. Send its address to the server. 
4. Display the date & time sent by the server.
 5. Close the input and output streams. 
6. Close the client socket. 
7. Stop
 Program:
 import java.net.*;
 import java.io.*;
 import java.util.*;
 class tcpserver
 {
 tcpserver.java
 public static void main(String arg[])
 {
 ServerSocket ss = null;
 Socket cs; PrintStream ps;
 BufferedReader dis;
 String inet; try
 {
 ss = new ServerSocket(4444);
 System.out.println("Press Ctrl+C to quit"); 
while(true)
 {
 cs = ss.accept();
 ps = new PrintStream(cs.getOutputStream());
 Date d = new Date();
 ps.println(d);
 dis = new BufferedReader(new InputStreamReader(cs.getInputStream()));
 inet = dis.readLine(); 
System.out.println("Client System/IP address is :"+ inet);
 ps.close(); 
dis.close();
 }
 }
 4
catch(IOException e)
 { System.out.println("The exception is :" + e);
 }
 }
 }
 import java.net.*;
 import java.io.*;
 class tcpclient
 {
 tcpclient.java
 public static void main (String args[])
 { 
Socket soc; 
BufferedReader dis;
 String sdate; 
PrintStream ps;
 try 
{ 
InetAddress ia = InetAddress.getLocalHost();
 if (args.length == 0)
 soc = new Socket(InetAddress.getLocalHost(),4444);
 else soc = new Socket(InetAddress.getByName(args[0]),4444);
 dis = new BufferedReader(new InputStreamReader(soc.getInputStream()));
 sdate=dis.readLine(); 
System.out.println("The date/time on server is : " +sdate);
 ps = new PrintStream(soc.getOutputStream());
 ps.println(ia);
 ps.close();}
 catch(IOException e)
 {
 System.out.println("THE EXCEPTION is :" + e);
 }
 }
 }


